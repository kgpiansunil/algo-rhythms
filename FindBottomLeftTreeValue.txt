class Solution {
    // I will first simply do this by using the level order traversal technique.
    public int findBottomLeftValue(TreeNode root) {
        // It is given that the given root can never be null so we never worry about that case.
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int leftMost = Integer.MIN_VALUE;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.remove();
                if(node.left != null){
                    queue.add(node.left);
                }
                if(node.right != null){
                    queue.add(node.right);
                }
                if(i == 0){
                    leftMost = node.val;
                }
            }
        }
        return leftMost;
    }
}