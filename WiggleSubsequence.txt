class Solution {
    public int wiggleMaxLength(int[] nums) {
        if(nums == null){ // it is an absurd case.
            return 0;
        }
        int length = nums.length;
        if(length == 0){
            return 0;
        }
        // if we reached this point we have ensured that the length of nums is atleast 1 we have got.
        int[] dp = new int[length];
        int[] dpHelper = new int[length];
        dp[0] = 1; // length less than 1 is trivially a wiggle subsequence.
        dpHelper[0] = 0; // if you want to extend it from here it can either go up or can go down.
        
        for(int i = 1; i < length; i++){
            int maxLengthOfWiggleSubsequenceEndingAtILastPlus = 1; // it is atleast 1 for any i we know that for sure.
            int maxLengthOfWiggleSubsequenceEndingAtILastMinus = 1;
            for(int j = i - 1; j >= 0; j--){
                if(dpHelper[j] != -1){ // it tells that hey if you want to extend me you have to be bigger than me.
                    if(nums[i] > nums[j]){
                        if(maxLengthOfWiggleSubsequenceEndingAtILastPlus < dp[j] + 1){
                            //System.out.println("Inside first if");
                            maxLengthOfWiggleSubsequenceEndingAtILastPlus = dp[j] + 1;
                        }
                    }
                }
                if(dpHelper[j] != 1){ // else it tell the opposite. Their can only be two possbile cases here.
                    if(nums[i] < nums[j]){
                        if(maxLengthOfWiggleSubsequenceEndingAtILastMinus < dp[j] + 1){
                            //System.out.println("Inside second else if");
                            maxLengthOfWiggleSubsequenceEndingAtILastMinus = dp[j] + 1;
                        }    
                    }
                }
            }
            if(maxLengthOfWiggleSubsequenceEndingAtILastPlus > maxLengthOfWiggleSubsequenceEndingAtILastMinus){
                dp[i] = maxLengthOfWiggleSubsequenceEndingAtILastPlus;
                dpHelper[i] = -1;
            }
            else if(maxLengthOfWiggleSubsequenceEndingAtILastPlus == maxLengthOfWiggleSubsequenceEndingAtILastMinus){
                dp[i] = maxLengthOfWiggleSubsequenceEndingAtILastPlus;
                dpHelper[i] = 0;
            }else{
                dp[i] = maxLengthOfWiggleSubsequenceEndingAtILastMinus;
                dpHelper[i] = 1;
            }
        }
        
        int maxLengthWSub = 1;
        for(int i = 0; i < length; i++){
            // System.out.println(dp[i]);
            if(maxLengthWSub < dp[i]){
                maxLengthWSub = dp[i];
            }
        }
        return maxLengthWSub;
    }
}