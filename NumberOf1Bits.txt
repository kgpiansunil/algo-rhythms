public class Solution {
    // you need to treat n as an unsigned value i.e. treat it normally that very first bit is not a signed bit.
    // I am going to convert the negative integers to positive unsigned equivalent.
    public int hammingWeight(int n) {
        if(n >= 0){
            return hammingWeightHelper(n);
        }
        else{
            long unsignedEquivalent = (long)Math.pow(2, 32) + n;
            return hammingWeightHelper(unsignedEquivalent);
        }
    }
    
    private int hammingWeightHelper(long n){
        int numberOf1s = 0;
        long number = n;
        for(long i = (long)Math.pow(2, 62); i >= 1; i = i / 2){ // So it starts from 2 power 62 and in every interation its halves itself                                                                     // till being equal to 1.
            if(i <= number){
                number -= i;
                numberOf1s++;
            }
        }
        return numberOf1s;
    }
   
}
